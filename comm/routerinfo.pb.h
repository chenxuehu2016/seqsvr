// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: routerinfo.proto

#ifndef PROTOBUF_routerinfo_2eproto__INCLUDED
#define PROTOBUF_routerinfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)

namespace seqsvr {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_routerinfo_2eproto();
void protobuf_AssignDesc_routerinfo_2eproto();
void protobuf_ShutdownFile_routerinfo_2eproto();

class RouterInfo;
class RouterList;

// ===================================================================

class RouterInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:seqsvr.RouterInfo) */ {
 public:
  RouterInfo();
  virtual ~RouterInfo();

  RouterInfo(const RouterInfo& from);

  inline RouterInfo& operator=(const RouterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RouterInfo& default_instance();

  void Swap(RouterInfo* other);

  // implements Message ----------------------------------------------

  inline RouterInfo* New() const { return New(NULL); }

  RouterInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RouterInfo& from);
  void MergeFrom(const RouterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RouterInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sect_id = 1;
  void clear_sect_id();
  static const int kSectIdFieldNumber = 1;
  ::google::protobuf::uint32 sect_id() const;
  void set_sect_id(::google::protobuf::uint32 value);

  // optional string alloc_ip = 2;
  void clear_alloc_ip();
  static const int kAllocIpFieldNumber = 2;
  const ::std::string& alloc_ip() const;
  void set_alloc_ip(const ::std::string& value);
  void set_alloc_ip(const char* value);
  void set_alloc_ip(const char* value, size_t size);
  ::std::string* mutable_alloc_ip();
  ::std::string* release_alloc_ip();
  void set_allocated_alloc_ip(::std::string* alloc_ip);

  // optional uint32 alloc_port = 3;
  void clear_alloc_port();
  static const int kAllocPortFieldNumber = 3;
  ::google::protobuf::uint32 alloc_port() const;
  void set_alloc_port(::google::protobuf::uint32 value);

  // optional uint32 inure = 4;
  void clear_inure();
  static const int kInureFieldNumber = 4;
  ::google::protobuf::uint32 inure() const;
  void set_inure(::google::protobuf::uint32 value);

  // optional uint32 n = 5;
  void clear_n();
  static const int kNFieldNumber = 5;
  ::google::protobuf::uint32 n() const;
  void set_n(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:seqsvr.RouterInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr alloc_ip_;
  ::google::protobuf::uint32 sect_id_;
  ::google::protobuf::uint32 alloc_port_;
  ::google::protobuf::uint32 inure_;
  ::google::protobuf::uint32 n_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_routerinfo_2eproto();
  friend void protobuf_AssignDesc_routerinfo_2eproto();
  friend void protobuf_ShutdownFile_routerinfo_2eproto();

  void InitAsDefaultInstance();
  static RouterInfo* default_instance_;
};
// -------------------------------------------------------------------

class RouterList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:seqsvr.RouterList) */ {
 public:
  RouterList();
  virtual ~RouterList();

  RouterList(const RouterList& from);

  inline RouterList& operator=(const RouterList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RouterList& default_instance();

  void Swap(RouterList* other);

  // implements Message ----------------------------------------------

  inline RouterList* New() const { return New(NULL); }

  RouterList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RouterList& from);
  void MergeFrom(const RouterList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RouterList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 router_ver = 1;
  void clear_router_ver();
  static const int kRouterVerFieldNumber = 1;
  ::google::protobuf::uint32 router_ver() const;
  void set_router_ver(::google::protobuf::uint32 value);

  // repeated .seqsvr.RouterInfo routers = 2;
  int routers_size() const;
  void clear_routers();
  static const int kRoutersFieldNumber = 2;
  const ::seqsvr::RouterInfo& routers(int index) const;
  ::seqsvr::RouterInfo* mutable_routers(int index);
  ::seqsvr::RouterInfo* add_routers();
  ::google::protobuf::RepeatedPtrField< ::seqsvr::RouterInfo >*
      mutable_routers();
  const ::google::protobuf::RepeatedPtrField< ::seqsvr::RouterInfo >&
      routers() const;

  // @@protoc_insertion_point(class_scope:seqsvr.RouterList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::seqsvr::RouterInfo > routers_;
  ::google::protobuf::uint32 router_ver_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_routerinfo_2eproto();
  friend void protobuf_AssignDesc_routerinfo_2eproto();
  friend void protobuf_ShutdownFile_routerinfo_2eproto();

  void InitAsDefaultInstance();
  static RouterList* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RouterInfo

// optional uint32 sect_id = 1;
inline void RouterInfo::clear_sect_id() {
  sect_id_ = 0u;
}
inline ::google::protobuf::uint32 RouterInfo::sect_id() const {
  // @@protoc_insertion_point(field_get:seqsvr.RouterInfo.sect_id)
  return sect_id_;
}
inline void RouterInfo::set_sect_id(::google::protobuf::uint32 value) {
  
  sect_id_ = value;
  // @@protoc_insertion_point(field_set:seqsvr.RouterInfo.sect_id)
}

// optional string alloc_ip = 2;
inline void RouterInfo::clear_alloc_ip() {
  alloc_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RouterInfo::alloc_ip() const {
  // @@protoc_insertion_point(field_get:seqsvr.RouterInfo.alloc_ip)
  return alloc_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RouterInfo::set_alloc_ip(const ::std::string& value) {
  
  alloc_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seqsvr.RouterInfo.alloc_ip)
}
inline void RouterInfo::set_alloc_ip(const char* value) {
  
  alloc_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seqsvr.RouterInfo.alloc_ip)
}
inline void RouterInfo::set_alloc_ip(const char* value, size_t size) {
  
  alloc_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seqsvr.RouterInfo.alloc_ip)
}
inline ::std::string* RouterInfo::mutable_alloc_ip() {
  
  // @@protoc_insertion_point(field_mutable:seqsvr.RouterInfo.alloc_ip)
  return alloc_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RouterInfo::release_alloc_ip() {
  // @@protoc_insertion_point(field_release:seqsvr.RouterInfo.alloc_ip)
  
  return alloc_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RouterInfo::set_allocated_alloc_ip(::std::string* alloc_ip) {
  if (alloc_ip != NULL) {
    
  } else {
    
  }
  alloc_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alloc_ip);
  // @@protoc_insertion_point(field_set_allocated:seqsvr.RouterInfo.alloc_ip)
}

// optional uint32 alloc_port = 3;
inline void RouterInfo::clear_alloc_port() {
  alloc_port_ = 0u;
}
inline ::google::protobuf::uint32 RouterInfo::alloc_port() const {
  // @@protoc_insertion_point(field_get:seqsvr.RouterInfo.alloc_port)
  return alloc_port_;
}
inline void RouterInfo::set_alloc_port(::google::protobuf::uint32 value) {
  
  alloc_port_ = value;
  // @@protoc_insertion_point(field_set:seqsvr.RouterInfo.alloc_port)
}

// optional uint32 inure = 4;
inline void RouterInfo::clear_inure() {
  inure_ = 0u;
}
inline ::google::protobuf::uint32 RouterInfo::inure() const {
  // @@protoc_insertion_point(field_get:seqsvr.RouterInfo.inure)
  return inure_;
}
inline void RouterInfo::set_inure(::google::protobuf::uint32 value) {
  
  inure_ = value;
  // @@protoc_insertion_point(field_set:seqsvr.RouterInfo.inure)
}

// optional uint32 n = 5;
inline void RouterInfo::clear_n() {
  n_ = 0u;
}
inline ::google::protobuf::uint32 RouterInfo::n() const {
  // @@protoc_insertion_point(field_get:seqsvr.RouterInfo.n)
  return n_;
}
inline void RouterInfo::set_n(::google::protobuf::uint32 value) {
  
  n_ = value;
  // @@protoc_insertion_point(field_set:seqsvr.RouterInfo.n)
}

// -------------------------------------------------------------------

// RouterList

// optional uint32 router_ver = 1;
inline void RouterList::clear_router_ver() {
  router_ver_ = 0u;
}
inline ::google::protobuf::uint32 RouterList::router_ver() const {
  // @@protoc_insertion_point(field_get:seqsvr.RouterList.router_ver)
  return router_ver_;
}
inline void RouterList::set_router_ver(::google::protobuf::uint32 value) {
  
  router_ver_ = value;
  // @@protoc_insertion_point(field_set:seqsvr.RouterList.router_ver)
}

// repeated .seqsvr.RouterInfo routers = 2;
inline int RouterList::routers_size() const {
  return routers_.size();
}
inline void RouterList::clear_routers() {
  routers_.Clear();
}
inline const ::seqsvr::RouterInfo& RouterList::routers(int index) const {
  // @@protoc_insertion_point(field_get:seqsvr.RouterList.routers)
  return routers_.Get(index);
}
inline ::seqsvr::RouterInfo* RouterList::mutable_routers(int index) {
  // @@protoc_insertion_point(field_mutable:seqsvr.RouterList.routers)
  return routers_.Mutable(index);
}
inline ::seqsvr::RouterInfo* RouterList::add_routers() {
  // @@protoc_insertion_point(field_add:seqsvr.RouterList.routers)
  return routers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::seqsvr::RouterInfo >*
RouterList::mutable_routers() {
  // @@protoc_insertion_point(field_mutable_list:seqsvr.RouterList.routers)
  return &routers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::seqsvr::RouterInfo >&
RouterList::routers() const {
  // @@protoc_insertion_point(field_list:seqsvr.RouterList.routers)
  return routers_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace seqsvr

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_routerinfo_2eproto__INCLUDED
