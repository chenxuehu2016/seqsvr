// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: routerinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "routerinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace seqsvr {

namespace {

const ::google::protobuf::Descriptor* RouterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouterList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouterList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_routerinfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_routerinfo_2eproto() {
  protobuf_AddDesc_routerinfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "routerinfo.proto");
  GOOGLE_CHECK(file != NULL);
  RouterInfo_descriptor_ = file->message_type(0);
  static const int RouterInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfo, sect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfo, alloc_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfo, alloc_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfo, inure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfo, n_),
  };
  RouterInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RouterInfo_descriptor_,
      RouterInfo::default_instance_,
      RouterInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(RouterInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfo, _is_default_instance_));
  RouterList_descriptor_ = file->message_type(1);
  static const int RouterList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterList, router_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterList, routers_),
  };
  RouterList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RouterList_descriptor_,
      RouterList::default_instance_,
      RouterList_offsets_,
      -1,
      -1,
      -1,
      sizeof(RouterList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterList, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_routerinfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RouterInfo_descriptor_, &RouterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RouterList_descriptor_, &RouterList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_routerinfo_2eproto() {
  delete RouterInfo::default_instance_;
  delete RouterInfo_reflection_;
  delete RouterList::default_instance_;
  delete RouterList_reflection_;
}

void protobuf_AddDesc_routerinfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_routerinfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fwrappers_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020routerinfo.proto\022\006seqsvr\032\036google/proto"
    "buf/wrappers.proto\"]\n\nRouterInfo\022\017\n\007sect"
    "_id\030\001 \001(\r\022\020\n\010alloc_ip\030\002 \001(\t\022\022\n\nalloc_por"
    "t\030\003 \001(\r\022\r\n\005inure\030\004 \001(\r\022\t\n\001n\030\005 \001(\r\"E\n\nRou"
    "terList\022\022\n\nrouter_ver\030\001 \001(\r\022#\n\007routers\030\002"
    " \003(\0132\022.seqsvr.RouterInfob\006proto3", 232);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "routerinfo.proto", &protobuf_RegisterTypes);
  RouterInfo::default_instance_ = new RouterInfo();
  RouterList::default_instance_ = new RouterList();
  RouterInfo::default_instance_->InitAsDefaultInstance();
  RouterList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_routerinfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_routerinfo_2eproto {
  StaticDescriptorInitializer_routerinfo_2eproto() {
    protobuf_AddDesc_routerinfo_2eproto();
  }
} static_descriptor_initializer_routerinfo_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouterInfo::kSectIdFieldNumber;
const int RouterInfo::kAllocIpFieldNumber;
const int RouterInfo::kAllocPortFieldNumber;
const int RouterInfo::kInureFieldNumber;
const int RouterInfo::kNFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouterInfo::RouterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seqsvr.RouterInfo)
}

void RouterInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RouterInfo::RouterInfo(const RouterInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seqsvr.RouterInfo)
}

void RouterInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sect_id_ = 0u;
  alloc_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  alloc_port_ = 0u;
  inure_ = 0u;
  n_ = 0u;
}

RouterInfo::~RouterInfo() {
  // @@protoc_insertion_point(destructor:seqsvr.RouterInfo)
  SharedDtor();
}

void RouterInfo::SharedDtor() {
  alloc_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RouterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouterInfo_descriptor_;
}

const RouterInfo& RouterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_routerinfo_2eproto();
  return *default_instance_;
}

RouterInfo* RouterInfo::default_instance_ = NULL;

RouterInfo* RouterInfo::New(::google::protobuf::Arena* arena) const {
  RouterInfo* n = new RouterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:seqsvr.RouterInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RouterInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RouterInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(sect_id_, n_);
  alloc_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool RouterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seqsvr.RouterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sect_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sect_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_alloc_ip;
        break;
      }

      // optional string alloc_ip = 2;
      case 2: {
        if (tag == 18) {
         parse_alloc_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alloc_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alloc_ip().data(), this->alloc_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "seqsvr.RouterInfo.alloc_ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_alloc_port;
        break;
      }

      // optional uint32 alloc_port = 3;
      case 3: {
        if (tag == 24) {
         parse_alloc_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &alloc_port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_inure;
        break;
      }

      // optional uint32 inure = 4;
      case 4: {
        if (tag == 32) {
         parse_inure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inure_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_n;
        break;
      }

      // optional uint32 n = 5;
      case 5: {
        if (tag == 40) {
         parse_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seqsvr.RouterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seqsvr.RouterInfo)
  return false;
#undef DO_
}

void RouterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seqsvr.RouterInfo)
  // optional uint32 sect_id = 1;
  if (this->sect_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sect_id(), output);
  }

  // optional string alloc_ip = 2;
  if (this->alloc_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alloc_ip().data(), this->alloc_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seqsvr.RouterInfo.alloc_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->alloc_ip(), output);
  }

  // optional uint32 alloc_port = 3;
  if (this->alloc_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->alloc_port(), output);
  }

  // optional uint32 inure = 4;
  if (this->inure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->inure(), output);
  }

  // optional uint32 n = 5;
  if (this->n() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->n(), output);
  }

  // @@protoc_insertion_point(serialize_end:seqsvr.RouterInfo)
}

::google::protobuf::uint8* RouterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seqsvr.RouterInfo)
  // optional uint32 sect_id = 1;
  if (this->sect_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sect_id(), target);
  }

  // optional string alloc_ip = 2;
  if (this->alloc_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alloc_ip().data(), this->alloc_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "seqsvr.RouterInfo.alloc_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->alloc_ip(), target);
  }

  // optional uint32 alloc_port = 3;
  if (this->alloc_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->alloc_port(), target);
  }

  // optional uint32 inure = 4;
  if (this->inure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->inure(), target);
  }

  // optional uint32 n = 5;
  if (this->n() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->n(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:seqsvr.RouterInfo)
  return target;
}

int RouterInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:seqsvr.RouterInfo)
  int total_size = 0;

  // optional uint32 sect_id = 1;
  if (this->sect_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sect_id());
  }

  // optional string alloc_ip = 2;
  if (this->alloc_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alloc_ip());
  }

  // optional uint32 alloc_port = 3;
  if (this->alloc_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->alloc_port());
  }

  // optional uint32 inure = 4;
  if (this->inure() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->inure());
  }

  // optional uint32 n = 5;
  if (this->n() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->n());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seqsvr.RouterInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RouterInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RouterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seqsvr.RouterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seqsvr.RouterInfo)
    MergeFrom(*source);
  }
}

void RouterInfo::MergeFrom(const RouterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seqsvr.RouterInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.sect_id() != 0) {
    set_sect_id(from.sect_id());
  }
  if (from.alloc_ip().size() > 0) {

    alloc_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alloc_ip_);
  }
  if (from.alloc_port() != 0) {
    set_alloc_port(from.alloc_port());
  }
  if (from.inure() != 0) {
    set_inure(from.inure());
  }
  if (from.n() != 0) {
    set_n(from.n());
  }
}

void RouterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seqsvr.RouterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouterInfo::CopyFrom(const RouterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seqsvr.RouterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterInfo::IsInitialized() const {

  return true;
}

void RouterInfo::Swap(RouterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouterInfo::InternalSwap(RouterInfo* other) {
  std::swap(sect_id_, other->sect_id_);
  alloc_ip_.Swap(&other->alloc_ip_);
  std::swap(alloc_port_, other->alloc_port_);
  std::swap(inure_, other->inure_);
  std::swap(n_, other->n_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouterInfo_descriptor_;
  metadata.reflection = RouterInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouterInfo

// optional uint32 sect_id = 1;
void RouterInfo::clear_sect_id() {
  sect_id_ = 0u;
}
 ::google::protobuf::uint32 RouterInfo::sect_id() const {
  // @@protoc_insertion_point(field_get:seqsvr.RouterInfo.sect_id)
  return sect_id_;
}
 void RouterInfo::set_sect_id(::google::protobuf::uint32 value) {
  
  sect_id_ = value;
  // @@protoc_insertion_point(field_set:seqsvr.RouterInfo.sect_id)
}

// optional string alloc_ip = 2;
void RouterInfo::clear_alloc_ip() {
  alloc_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RouterInfo::alloc_ip() const {
  // @@protoc_insertion_point(field_get:seqsvr.RouterInfo.alloc_ip)
  return alloc_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RouterInfo::set_alloc_ip(const ::std::string& value) {
  
  alloc_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:seqsvr.RouterInfo.alloc_ip)
}
 void RouterInfo::set_alloc_ip(const char* value) {
  
  alloc_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:seqsvr.RouterInfo.alloc_ip)
}
 void RouterInfo::set_alloc_ip(const char* value, size_t size) {
  
  alloc_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:seqsvr.RouterInfo.alloc_ip)
}
 ::std::string* RouterInfo::mutable_alloc_ip() {
  
  // @@protoc_insertion_point(field_mutable:seqsvr.RouterInfo.alloc_ip)
  return alloc_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RouterInfo::release_alloc_ip() {
  // @@protoc_insertion_point(field_release:seqsvr.RouterInfo.alloc_ip)
  
  return alloc_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RouterInfo::set_allocated_alloc_ip(::std::string* alloc_ip) {
  if (alloc_ip != NULL) {
    
  } else {
    
  }
  alloc_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alloc_ip);
  // @@protoc_insertion_point(field_set_allocated:seqsvr.RouterInfo.alloc_ip)
}

// optional uint32 alloc_port = 3;
void RouterInfo::clear_alloc_port() {
  alloc_port_ = 0u;
}
 ::google::protobuf::uint32 RouterInfo::alloc_port() const {
  // @@protoc_insertion_point(field_get:seqsvr.RouterInfo.alloc_port)
  return alloc_port_;
}
 void RouterInfo::set_alloc_port(::google::protobuf::uint32 value) {
  
  alloc_port_ = value;
  // @@protoc_insertion_point(field_set:seqsvr.RouterInfo.alloc_port)
}

// optional uint32 inure = 4;
void RouterInfo::clear_inure() {
  inure_ = 0u;
}
 ::google::protobuf::uint32 RouterInfo::inure() const {
  // @@protoc_insertion_point(field_get:seqsvr.RouterInfo.inure)
  return inure_;
}
 void RouterInfo::set_inure(::google::protobuf::uint32 value) {
  
  inure_ = value;
  // @@protoc_insertion_point(field_set:seqsvr.RouterInfo.inure)
}

// optional uint32 n = 5;
void RouterInfo::clear_n() {
  n_ = 0u;
}
 ::google::protobuf::uint32 RouterInfo::n() const {
  // @@protoc_insertion_point(field_get:seqsvr.RouterInfo.n)
  return n_;
}
 void RouterInfo::set_n(::google::protobuf::uint32 value) {
  
  n_ = value;
  // @@protoc_insertion_point(field_set:seqsvr.RouterInfo.n)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouterList::kRouterVerFieldNumber;
const int RouterList::kRoutersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouterList::RouterList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:seqsvr.RouterList)
}

void RouterList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RouterList::RouterList(const RouterList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:seqsvr.RouterList)
}

void RouterList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  router_ver_ = 0u;
}

RouterList::~RouterList() {
  // @@protoc_insertion_point(destructor:seqsvr.RouterList)
  SharedDtor();
}

void RouterList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RouterList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouterList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouterList_descriptor_;
}

const RouterList& RouterList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_routerinfo_2eproto();
  return *default_instance_;
}

RouterList* RouterList::default_instance_ = NULL;

RouterList* RouterList::New(::google::protobuf::Arena* arena) const {
  RouterList* n = new RouterList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouterList::Clear() {
// @@protoc_insertion_point(message_clear_start:seqsvr.RouterList)
  router_ver_ = 0u;
  routers_.Clear();
}

bool RouterList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:seqsvr.RouterList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 router_ver = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &router_ver_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_routers;
        break;
      }

      // repeated .seqsvr.RouterInfo routers = 2;
      case 2: {
        if (tag == 18) {
         parse_routers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_routers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_routers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_routers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:seqsvr.RouterList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:seqsvr.RouterList)
  return false;
#undef DO_
}

void RouterList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:seqsvr.RouterList)
  // optional uint32 router_ver = 1;
  if (this->router_ver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->router_ver(), output);
  }

  // repeated .seqsvr.RouterInfo routers = 2;
  for (unsigned int i = 0, n = this->routers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->routers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:seqsvr.RouterList)
}

::google::protobuf::uint8* RouterList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:seqsvr.RouterList)
  // optional uint32 router_ver = 1;
  if (this->router_ver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->router_ver(), target);
  }

  // repeated .seqsvr.RouterInfo routers = 2;
  for (unsigned int i = 0, n = this->routers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->routers(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:seqsvr.RouterList)
  return target;
}

int RouterList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:seqsvr.RouterList)
  int total_size = 0;

  // optional uint32 router_ver = 1;
  if (this->router_ver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->router_ver());
  }

  // repeated .seqsvr.RouterInfo routers = 2;
  total_size += 1 * this->routers_size();
  for (int i = 0; i < this->routers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->routers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouterList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:seqsvr.RouterList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RouterList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RouterList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:seqsvr.RouterList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:seqsvr.RouterList)
    MergeFrom(*source);
  }
}

void RouterList::MergeFrom(const RouterList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:seqsvr.RouterList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  routers_.MergeFrom(from.routers_);
  if (from.router_ver() != 0) {
    set_router_ver(from.router_ver());
  }
}

void RouterList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:seqsvr.RouterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouterList::CopyFrom(const RouterList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:seqsvr.RouterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterList::IsInitialized() const {

  return true;
}

void RouterList::Swap(RouterList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouterList::InternalSwap(RouterList* other) {
  std::swap(router_ver_, other->router_ver_);
  routers_.UnsafeArenaSwap(&other->routers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RouterList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouterList_descriptor_;
  metadata.reflection = RouterList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouterList

// optional uint32 router_ver = 1;
void RouterList::clear_router_ver() {
  router_ver_ = 0u;
}
 ::google::protobuf::uint32 RouterList::router_ver() const {
  // @@protoc_insertion_point(field_get:seqsvr.RouterList.router_ver)
  return router_ver_;
}
 void RouterList::set_router_ver(::google::protobuf::uint32 value) {
  
  router_ver_ = value;
  // @@protoc_insertion_point(field_set:seqsvr.RouterList.router_ver)
}

// repeated .seqsvr.RouterInfo routers = 2;
int RouterList::routers_size() const {
  return routers_.size();
}
void RouterList::clear_routers() {
  routers_.Clear();
}
const ::seqsvr::RouterInfo& RouterList::routers(int index) const {
  // @@protoc_insertion_point(field_get:seqsvr.RouterList.routers)
  return routers_.Get(index);
}
::seqsvr::RouterInfo* RouterList::mutable_routers(int index) {
  // @@protoc_insertion_point(field_mutable:seqsvr.RouterList.routers)
  return routers_.Mutable(index);
}
::seqsvr::RouterInfo* RouterList::add_routers() {
  // @@protoc_insertion_point(field_add:seqsvr.RouterList.routers)
  return routers_.Add();
}
::google::protobuf::RepeatedPtrField< ::seqsvr::RouterInfo >*
RouterList::mutable_routers() {
  // @@protoc_insertion_point(field_mutable_list:seqsvr.RouterList.routers)
  return &routers_;
}
const ::google::protobuf::RepeatedPtrField< ::seqsvr::RouterInfo >&
RouterList::routers() const {
  // @@protoc_insertion_point(field_list:seqsvr.RouterList.routers)
  return routers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace seqsvr

// @@protoc_insertion_point(global_scope)
