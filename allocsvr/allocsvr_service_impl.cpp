/* allocsvr_service_impl.cpp

 Generated by phxrpc_pb2service from allocsvr.proto

*/

#include "allocsvr_service_impl.h"
#include "allocsvr_server_config.h"
#include "allocsvr.pb.h"
#include "phxrpc/file.h"

#ifdef WITH_GPERFTOOLS
#include "gperftools/profiler.h"
#include "gperftools/heap-checker.h"
#include "gperftools/heap-profiler.h"
#endif

//AllocsvrServiceImpl :: AllocsvrServiceImpl(ServiceArgs_t & app_args)
//    : args_(app_args)
//{
//
//}

AllocsvrServiceImpl::AllocsvrServiceImpl( ServiceArgs_t & app_args) :
	args_(app_args)
{
}

AllocsvrServiceImpl :: ~AllocsvrServiceImpl()
{
}

// GPerfTools profiler flag
static bool ProfileStarted = false;

int AllocsvrServiceImpl :: PHXEcho( const google::protobuf::StringValue & req,
        google::protobuf::StringValue * resp )
{

#ifdef WITH_GPERFTOOLS
	if(strcasecmp("start_profile", req.value().c_str()) == 0) {
		// start cpu profile
		ProfilerStart("allocsvr_main.profile.log");
		// start heap profile
		HeapProfilerStart("allocsvr_main");

		ProfileStarted = true;
	} else if (strcasecmp("end_profile", req.value().c_str()) == 0 && ProfileStarted) {
		ProfilerStop();
		HeapProfilerStop();
		ProfileStarted = false;
	}
#endif

    resp->set_value( req.value() );
    return 0;


}

int AllocsvrServiceImpl :: GetSeq( const allocsvr::SeqReq & req,
        allocsvr::SeqResp * resp )
{
    return -1;
}

void AllocsvrServiceImpl ::storeTimer()
{

}


