// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: allocsvr.proto

#ifndef PROTOBUF_allocsvr_2eproto__INCLUDED
#define PROTOBUF_allocsvr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include <google/protobuf/empty.pb.h>
#include "phxrpc/rpc/phxrpc.pb.h"
// @@protoc_insertion_point(includes)

namespace allocsvr {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_allocsvr_2eproto();
void protobuf_AssignDesc_allocsvr_2eproto();
void protobuf_ShutdownFile_allocsvr_2eproto();

class SeqReq;
class SeqResp;

// ===================================================================

class SeqReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allocsvr.SeqReq) */ {
 public:
  SeqReq();
  virtual ~SeqReq();

  SeqReq(const SeqReq& from);

  inline SeqReq& operator=(const SeqReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeqReq& default_instance();

  void Swap(SeqReq* other);

  // implements Message ----------------------------------------------

  inline SeqReq* New() const { return New(NULL); }

  SeqReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeqReq& from);
  void MergeFrom(const SeqReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SeqReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // optional uint32 router_ver = 2;
  void clear_router_ver();
  static const int kRouterVerFieldNumber = 2;
  ::google::protobuf::uint32 router_ver() const;
  void set_router_ver(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:allocsvr.SeqReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 router_ver_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_allocsvr_2eproto();
  friend void protobuf_AssignDesc_allocsvr_2eproto();
  friend void protobuf_ShutdownFile_allocsvr_2eproto();

  void InitAsDefaultInstance();
  static SeqReq* default_instance_;
};
// -------------------------------------------------------------------

class SeqResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:allocsvr.SeqResp) */ {
 public:
  SeqResp();
  virtual ~SeqResp();

  SeqResp(const SeqResp& from);

  inline SeqResp& operator=(const SeqResp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeqResp& default_instance();

  void Swap(SeqResp* other);

  // implements Message ----------------------------------------------

  inline SeqResp* New() const { return New(NULL); }

  SeqResp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeqResp& from);
  void MergeFrom(const SeqResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SeqResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 seq = 1;
  void clear_seq();
  static const int kSeqFieldNumber = 1;
  ::google::protobuf::uint64 seq() const;
  void set_seq(::google::protobuf::uint64 value);

  // optional bytes routers = 2;
  void clear_routers();
  static const int kRoutersFieldNumber = 2;
  const ::std::string& routers() const;
  void set_routers(const ::std::string& value);
  void set_routers(const char* value);
  void set_routers(const void* value, size_t size);
  ::std::string* mutable_routers();
  ::std::string* release_routers();
  void set_allocated_routers(::std::string* routers);

  // @@protoc_insertion_point(class_scope:allocsvr.SeqResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 seq_;
  ::google::protobuf::internal::ArenaStringPtr routers_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_allocsvr_2eproto();
  friend void protobuf_AssignDesc_allocsvr_2eproto();
  friend void protobuf_ShutdownFile_allocsvr_2eproto();

  void InitAsDefaultInstance();
  static SeqResp* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SeqReq

// optional uint32 uid = 1;
inline void SeqReq::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 SeqReq::uid() const {
  // @@protoc_insertion_point(field_get:allocsvr.SeqReq.uid)
  return uid_;
}
inline void SeqReq::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:allocsvr.SeqReq.uid)
}

// optional uint32 router_ver = 2;
inline void SeqReq::clear_router_ver() {
  router_ver_ = 0u;
}
inline ::google::protobuf::uint32 SeqReq::router_ver() const {
  // @@protoc_insertion_point(field_get:allocsvr.SeqReq.router_ver)
  return router_ver_;
}
inline void SeqReq::set_router_ver(::google::protobuf::uint32 value) {
  
  router_ver_ = value;
  // @@protoc_insertion_point(field_set:allocsvr.SeqReq.router_ver)
}

// -------------------------------------------------------------------

// SeqResp

// optional uint64 seq = 1;
inline void SeqResp::clear_seq() {
  seq_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SeqResp::seq() const {
  // @@protoc_insertion_point(field_get:allocsvr.SeqResp.seq)
  return seq_;
}
inline void SeqResp::set_seq(::google::protobuf::uint64 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:allocsvr.SeqResp.seq)
}

// optional bytes routers = 2;
inline void SeqResp::clear_routers() {
  routers_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeqResp::routers() const {
  // @@protoc_insertion_point(field_get:allocsvr.SeqResp.routers)
  return routers_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeqResp::set_routers(const ::std::string& value) {
  
  routers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:allocsvr.SeqResp.routers)
}
inline void SeqResp::set_routers(const char* value) {
  
  routers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:allocsvr.SeqResp.routers)
}
inline void SeqResp::set_routers(const void* value, size_t size) {
  
  routers_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:allocsvr.SeqResp.routers)
}
inline ::std::string* SeqResp::mutable_routers() {
  
  // @@protoc_insertion_point(field_mutable:allocsvr.SeqResp.routers)
  return routers_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeqResp::release_routers() {
  // @@protoc_insertion_point(field_release:allocsvr.SeqResp.routers)
  
  return routers_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeqResp::set_allocated_routers(::std::string* routers) {
  if (routers != NULL) {
    
  } else {
    
  }
  routers_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), routers);
  // @@protoc_insertion_point(field_set_allocated:allocsvr.SeqResp.routers)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace allocsvr

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_allocsvr_2eproto__INCLUDED
