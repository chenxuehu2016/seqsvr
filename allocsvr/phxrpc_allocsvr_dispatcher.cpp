/* phxrpc_allocsvr_dispatcher.h

 Generated by phxrpc_pb2service from allocsvr.proto

 Please DO NOT edit unless you know exactly what you are doing.

*/

#include "phxrpc_allocsvr_dispatcher.h"

#include "allocsvr.pb.h"
#include "phxrpc_allocsvr_service.h"
#include "phxrpc/http.h"
#include "phxrpc/file.h"
#include <errno.h>

AllocsvrDispatcher :: AllocsvrDispatcher( AllocsvrService & service, phxrpc::DispatcherArgs_t * dispatcher_args )
    : service_( service ), dispatcher_args_(dispatcher_args)
{
}

AllocsvrDispatcher :: ~AllocsvrDispatcher()
{
}

const phxrpc::HttpDispatcher< AllocsvrDispatcher >::URIFuncMap & AllocsvrDispatcher :: GetURIFuncMap()
{
    static phxrpc::HttpDispatcher< AllocsvrDispatcher >::URIFuncMap uri_func_map = {
        {"/allocsvr/PHXEcho", &AllocsvrDispatcher::PHXEcho},
        {"/allocsvr/GetSeq", &AllocsvrDispatcher::GetSeq}};
    return uri_func_map;
}

int AllocsvrDispatcher :: PHXEcho( const phxrpc::HttpRequest & request, phxrpc::HttpResponse * response )
{
    dispatcher_args_->server_monitor->SvrCall(-1, "PHXEcho", 1);

    int ret = 0;

    google::protobuf::StringValue req;
    google::protobuf::StringValue resp;

    //unpack request
    {
        if( ! req.ParseFromString( request.GetContent() ) )
        {
            phxrpc::log( LOG_ERR, "ERROR: FromBuffer fail size %zu ip %s",
                request.GetContent().size(), request.GetClientIP() );
            return -1 * EINVAL;
        }
    }

    //logic process
    {
        if( 0 == ret ) ret = service_.PHXEcho( req, &resp );
    }

    //pack response
    {
        if( ! resp.SerializeToString( &( response->GetContent() ) ) )
        {
            phxrpc::log( LOG_ERR, "ERROR: ToBuffer fail ip %s", request.GetClientIP() );
            return -1 * ENOMEM;
        }
    }

    phxrpc::log( LOG_DEBUG, "RETN: PHXEcho = %d", ret );

    return ret;
}

int AllocsvrDispatcher :: GetSeq( const phxrpc::HttpRequest & request, phxrpc::HttpResponse * response )
{
    dispatcher_args_->server_monitor->SvrCall(1, "GetSeq", 1);

    int ret = 0;

    allocsvr::SeqReq req;
    allocsvr::SeqResp resp;

    //unpack request
    {
        if( ! req.ParseFromString( request.GetContent() ) )
        {
            phxrpc::log( LOG_ERR, "ERROR: FromBuffer fail size %zu ip %s",
                request.GetContent().size(), request.GetClientIP() );
            return -1 * EINVAL;
        }
    }

    //logic process
    {
        if( 0 == ret ) ret = service_.GetSeq( req, &resp );
    }

    //pack response
    {
        if( ! resp.SerializeToString( &( response->GetContent() ) ) )
        {
            phxrpc::log( LOG_ERR, "ERROR: ToBuffer fail ip %s", request.GetClientIP() );
            return -1 * ENOMEM;
        }
    }

    phxrpc::log( LOG_DEBUG, "RETN: GetSeq = %d", ret );

    return ret;
}


