/* storesvr_service_impl.cpp

 Generated by phxrpc_pb2service from storesvr.proto

*/

#include <fcntl.h>
#include <cmath>
#include <sys/mman.h>
#include <cstring>
#include <zconf.h>
#include "storesvr_service_impl.h"
#include "storesvr_server_config.h"
#include "storesvr.pb.h"
#include "phxrpc/file.h"
#include "sys/stat.h"
#include "store_bin_util.h"
#include "sectioninfo.pb.h"
#include "../comm/errordef.h"


using namespace storesvr;

StoresvrServiceImpl :: StoresvrServiceImpl(ServiceArgs_t & app_args)
    : args_(app_args)
{
}

StoresvrServiceImpl :: ~StoresvrServiceImpl()
{
}

int StoresvrServiceImpl :: PHXEcho( const google::protobuf::StringValue & req,
        google::protobuf::StringValue * resp )
{
    resp->set_value( req.value() );
    return 0;
}

int StoresvrServiceImpl :: GetRouterList( const storesvr::RouterReq & req,
        storesvr::RouterResp * resp )
{

    return -1;
}

int StoresvrServiceImpl :: GetSections( const storesvr::SectionReq & req,
         storesvr::SectionResp * resp )
{
	SectionList info;
	int size = req.sect_id_size();
	for(int i = 0; i < size; i++) {
		uint32_t sect_id = req.sect_id(i);
		SectionInfo* pInfo = info.add_sections();
		uint64_t seq = pInfo->max_seq();
		StoreBinUtil::getStoreBin(args_.store_mmap_, sect_id, &seq);
	}

	std::string* pString = resp->mutable_sections();
    info.SerializeToString(pString);

	return 0;
}

int StoresvrServiceImpl :: storeSection( const storesvr::StoreReq & req,
										 storesvr::StoreResp * resp )
{
	uint32_t sect_id =  req.sect_id();
	uint64_t seq =  req.max_seq();

	int ret = StoreBinUtil::writeStoreBin(args_.store_mmap_, sect_id, seq);
	StoreBinUtil::syncStoreBin(args_.store_mmap_);

	return ret;
}



