/* phxrpc_storesvr_stub.cpp

 Generated by phxrpc_pb2client from storesvr.proto

 Please DO NOT edit unless you know exactly what you are doing.

*/

#include "phxrpc/rpc.h"
#include "phxrpc/network.h"

#include "phxrpc_storesvr_stub.h"
#include "storesvr.pb.h"

StoresvrStub :: StoresvrStub( phxrpc::BaseTcpStream & socket, phxrpc::ClientMonitor & client_monitor )
    : socket_( socket ), client_monitor_(client_monitor), keep_alive_(false)
{
}

StoresvrStub :: ~StoresvrStub()
{
}

void StoresvrStub :: SetKeepAlive( const bool keep_alive )
{
    keep_alive_ = keep_alive;
}

int StoresvrStub :: PHXEcho( const google::protobuf::StringValue & req,
        google::protobuf::StringValue * resp )
{
    phxrpc::HttpCaller caller( socket_, client_monitor_ );
    caller.SetURI( "/storesvr/PHXEcho", -1 );
    caller.SetKeepAlive( keep_alive_ );
    return caller.Call( req, resp );
}

int StoresvrStub :: GetRouterList( const storesvr::RouterReq & req,
        storesvr::RouterResp * resp )
{
    phxrpc::HttpCaller caller( socket_, client_monitor_ );
    caller.SetURI( "/storesvr/GetRouterList", 1 );
    caller.SetKeepAlive( keep_alive_ );
    return caller.Call( req, resp );
}

int StoresvrStub :: GetSections( const storesvr::SectionReq & req,
        storesvr::SectionResp * resp )
{
    phxrpc::HttpCaller caller( socket_, client_monitor_ );
    caller.SetURI( "/storesvr/GetSections", 2 );
    caller.SetKeepAlive( keep_alive_ );
    return caller.Call( req, resp );
}

int StoresvrStub :: storeSection( const storesvr::StoreReq & req,
        storesvr::StoreResp * resp )
{
    phxrpc::HttpCaller caller( socket_, client_monitor_ );
    caller.SetURI( "/storesvr/storeSection", 2 );
    caller.SetKeepAlive( keep_alive_ );
    return caller.Call( req, resp );
}

