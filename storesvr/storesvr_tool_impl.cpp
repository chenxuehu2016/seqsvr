/* storesvr_tool_impl.cpp

 Generated by phxrpc_pb2tool from storesvr.proto

*/

#include "storesvr_tool_impl.h"
#include "storesvr_client.h"

#include "phxrpc/file.h"

using namespace phxrpc;

StoresvrToolImpl:: StoresvrToolImpl()
{
}

StoresvrToolImpl:: ~StoresvrToolImpl()
{
}

int StoresvrToolImpl :: PHXEcho( phxrpc::OptMap & opt_map )
{
    google::protobuf::StringValue req;
    google::protobuf::StringValue resp;

    if( NULL == opt_map.Get( 's' ) ) return -1;

    req.set_value( opt_map.Get( 's' ) );

    StoresvrClient client;
    int ret = client.PHXEcho( req, &resp );
    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    return ret;
}

int StoresvrToolImpl :: GetRouterList( phxrpc::OptMap & opt_map )
{
    storesvr::RouterReq req;
    storesvr::RouterResp resp;

    //TODO: fill req from opt_map


    StoresvrClient client;
    int ret = client.GetRouterList( req, &resp );
    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    return ret;
}

int StoresvrToolImpl :: GetSections( phxrpc::OptMap & opt_map )
{
    storesvr::SectionReq req;
    storesvr::SectionResp resp;

    //TODO: fill req from opt_map

    StoresvrClient client;
    int ret = client.GetSections( req, &resp );
    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    return ret;
}

int StoresvrToolImpl :: storeSection( phxrpc::OptMap & opt_map )
{
    storesvr::StoreReq req;
    storesvr::StoreResp resp;

    //TODO: fill req from opt_map
    const char* string = opt_map.Get('s', 0 );
    const char* string2 = opt_map.Get('m');
    if( NULL == string) return -1;

    uint32_t sect_id = 0;
    uint32_t seq = 0;

    opt_map.GetUInt('s', &sect_id);
    opt_map.GetUInt('m', &seq);

    req.set_sect_id(sect_id);
    req.set_max_seq(seq);

    printf( "request: {\n%s}\n", req.DebugString().c_str() );
    StoresvrClient client;
    int ret = client.storeSection( req, &resp );
    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    return ret;
}

